import numpy as np
import matplotlib.pyplot as pl
import time

start = time.time()
	# Used to test how long the program runs.

image = np.zeros([500, 500, 4])
	# Create a 500 x 500 x 4 'matrix' for image.

def drawCircle(image, radius, origin, unique):
    """
        Courtesy of:
            http://stackoverflow.com/questions/39862709/generate-coordinates-in-grid-that-lie-within-a-circle
        Inputs:
        Returns:
    """
    # print("Drawing a new circle")
    # coords = []
    originx = origin[0]
    originy = origin[1]
    xlim = int(radius)
    oldUniques = []
        # - This doesn't work quite as intended yet 
    #   this should create a crater centered at orignx, originy, but is only
    #   creating semicircles (probably thanks to the abs() code- #
    for i in range(originx - xlim, originx + (xlim + 1)):
        # - TODO: Fix this so that it's not broken.
        #   the abs() part broke this, but without it we get complex numbers.
        #   once that is fixed, this should work brilliantly - #
        '''
		Kyle's notes. The problem seems to be that the "rows" value (I don't knw if x or y) is effecting 
		the circle size some how. Theoretically, if this were only producing semicircles, creating a ylim
		of the opposite value should draw the other half. There was this issue of tirangular structures being
		drawn. It comes from the i values possibly being around 500. 500 * 500 will produce a huge circle.
        '''
        if (i > 499) or (i < 1):
            continue
        drawCalc = (radius * radius) - ((i-originx) * (i-originx))
        if drawCalc < 0:
            ylim = -int((-drawCalc) ** .5)
        else:
            ylim = int( drawCalc ** .5)
        for j in range(originy - ylim, originy + (ylim + 1)):
            if (j > 499) or (j < 1):
                continue
            # coords.append([i,j])
            if [image[i][j][0], image[i][j][1], image[i][j][2], image[i][j][3]] not in oldUniques:
                oldUniques.append([image[i][j][0],image[i][j][1],image[i][j][2],image[i][j][3]])
            image[i][j][0] = unique
            image[i][j][1] = unique 
            image[i][j][2] = unique
            image[i][j][3] = 1
    fewerCraters = 0
    for coolColorz in oldUniques:
        if coolColorz in image[:][:]:
            fewerCraters -= 1

    return(image, fewerCraters)

def simImpacts(blankimage):
    """
    Inputs:
    Returns:
    """

    count = 0
    visibleCount = 0
    unique = 1
    cratermap = blankimage
    while 0 in cratermap[:][:][0]:
        impactsize = int(np.random.lognormal(1., 1., 1.) * 10.)
        if impactsize < 10:
            # - If we didn't get a crater at least 10km in size, skip to next iteration - #
            continue
        # - Pass to draw function to draw the actual crater generated by the impact - #
        count += 1
        visibleCount += 1
        if count == 10000:
            return cratermap, count
        #  - This should only examine the 3rd index of our image array
        #    which is itself an array of rgba values for that particular
        #    pixel. If each pixel is not empty, that is if the values in
        #    our rgba are nonzero, then we have reached saturation and can
        #    break from the loop - #

        # -- Generate the location for the center of the crater -- #
        x = int(np.random.rand()*500.)
        y = int(np.random.rand()*500.)

        # -- Mark the center of the crater -- #
        # cratermap[x][y][0] += 0.1
        # cratermap[x][y][1] += 0.1
        # cratermap[x][y][2] += 0.1
        # cratermap[x][y][3]  = 1.0

        # -- Generate and draw a crater for our impact -- #
        # - *10 here to make sure that our crater sizes are (mostly) above 10km - #
        cratermap, lessCraters = drawCircle(cratermap, int(impactsize/2.), [x,y], unique)
        unique +=1
        # - commented code is deprecated - #
        # for pixel in impactcrater:
        #     xval = pixel[0]
        #     yval = pixel[1]
        #     if xval > 499:
        #         continue
        #     if xval < 1:
        #         continue
        #     if yval > 499:
        #         continue
        #     if yval < 1:
        #         continue
        #     cratermap[xval][yval][0] += 0.1
        #     cratermap[xval][yval][1] += 0.1
        #     cratermap[xval][yval][2] += 0.1
        #     cratermap[xval][yval][3]  = 1
        print("Total craters: %i  Visible craters: %i" %(count, visibleCount))
        visibleCount -= lessCraters
    return cratermap, count, visibleCount

image, totalcount, visible = simImpacts(blankimage=image)
temp = []
cratercount=list()
allReds = image[:,:,0]
normReds = allReds / np.max(allReds) 
for i in (normReds.tolist()):
    temp = temp+i
    cratercount.append(len(set(temp)))
print("""We have %i visible craters""" %visible)
print(""" Our area saw %i impacters.
This equates to %.2e years taken to reach saturation.""" %(totalcount, totalcount*1000))

print(""" At the point of saturation, we find that there are %i craters.""" %(cratercount[-1]))

total = time.time() - start
print("Time taken to run simulation: %f seconds" %(total))
# normalize=np.max(image[:][:][0:2])
# image[:][:][0:2] = image[:][:][0:2] / normalize
pl.imshow(image)
pl.show()

pl.scatter(np.linspace(0,len(cratercount), len(cratercount)), cratercount)
pl.show()